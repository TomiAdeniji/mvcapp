@using Qbicles.BusinessRules
@using Qbicles.Models
@using Qbicles.Models.Trader.Movement;
@model TraderTransfer
@{
    ViewBag.Title = $"Trader - Transfer #{Model.Reference?.FullRef ?? Model.Id.ToString()}";

    var api = (string)ViewBag.DocRetrievalUrl;
    var pageSize = HelperClass.activitiesPageSize;
    var timeZone = (string)ViewBag.CurrentTimeZone ?? "";
    var userId = ViewBag.CurrentUserId;
    var userAvatar = ViewBag.CurrentUserAvatar;
    var userRight = "none";
    var traderAppRight = (IsReviewerAndApproverModel)ViewBag.TraderApprovalRight;
    var currencySettings = (Qbicles.Models.CurrencySetting)ViewBag.CurrencySettings;

    var today = (DateTime)ViewBag.Today;
    var timeline = (List<ApprovalStatusTimeline>)ViewBag.Timeline;
    var timelineDate = (List<DateTime>)ViewBag.TimelineDate;
    var isConsumerDomain = (Boolean)ViewBag.IsCustomerDomain;
    var transferType = "transfer";
    if (Model.Sale != null && Model.Purchase == null)
    {
        transferType = "saleTransfer";
    }
    else if (Model.Sale == null && Model.Purchase != null)
    {
        transferType = "purchaseTransfer";
    }
    //o1
    if (!traderAppRight.IsInitiators && !traderAppRight.IsReviewer && !traderAppRight.IsApprover)
    {
        userRight = "none";

    }//hiden approval, no edit
     //o2
    else if (traderAppRight.IsInitiators && !traderAppRight.IsReviewer && !traderAppRight.IsApprover)
    { userRight = "initiator"; } // readonly approval, no edit
                                 //o3
    else if (traderAppRight.IsReviewer && Model.TransferApprovalProcess.RequestStatus == ApprovalReq.RequestStatusEnum.Pending)
    {
        userRight = "reviewer";
    }//If the user is an ApprovalReq.ApprovalRequestDefinition.Reviewer and the Status of the ApprovalReq is Pending, the drop down displays the items Discard, or Send to Approval.
     //o4
    else if (traderAppRight.IsApprover && Model.TransferApprovalProcess.RequestStatus == ApprovalReq.RequestStatusEnum.Reviewed)
    {
        userRight = "approver";
    }
    //o4.1
    else if (traderAppRight.IsApprover && Model.TransferApprovalProcess.RequestStatus == ApprovalReq.RequestStatusEnum.Pending)
    {
        userRight = "initiator";
    }
    //o5
    else if (Model.TransferApprovalProcess.RequestStatus == ApprovalReq.RequestStatusEnum.Approved
             || Model.TransferApprovalProcess.RequestStatus == ApprovalReq.RequestStatusEnum.Denied
             || Model.TransferApprovalProcess.RequestStatus == ApprovalReq.RequestStatusEnum.Discarded)
    {
        userRight = "completed";
    }

    var confirm = "";
    var isChange = "";
    if (userRight == "initiator" || userRight == "completed" || userRight == "none")
    {
        isChange = "disabled";
        confirm = "hidden";
    }
    if (isChange == "disabled")
    {
        confirm = "hidden";
    }
    var isEdit = Model.Workgroup?.Members.Any(u => u.Id == userId) ?? false;
    var dateFormatUser = (string)ViewBag.CurrentDateFormat;
    var reviewers = Model.Workgroup?.Reviewers ?? new List<ApplicationUser>();
    var approvers = Model.Workgroup?.Approvers ?? new List<ApplicationUser>();

    var transferStatus = "";
}
@{
    <style>
        .transfer .content-block-upper p {
            text-align: left !important;
        }
    </style>
}
<input type="hidden" value="@api" id="api_url" />
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper qbicle-detail  mdv2-wrapper" id="discussion-thread">
    <div class="tabnav-spacer hidden-xs"></div>
    <input type="hidden" value="@Model.Id" id="transfer_id" />
    <!-- Main content -->
    <section class="mdv2 dash">
        <!-- App bar -->
        <div class="mdv2-col-app" style="margin-bottom: 0;">

            <div data-spy="affix" class="contained-sidebar affix">

                <div class="activity-overview plain company-overview welcome-info" style="text-align: left !important; flex: none; margin: 0 0 30px 0; padding-top: 30px; padding-bottom: 0;">

                    <div class="pull-left" style="margin-bottom: 15px;">
                        <a onclick="QbicleSelected('@(Model.Workgroup?.Qbicle.Key)','Dashboard')" class="btn btn-primary"><i class="fa fa-angle-up"></i> &nbsp; Qbicle</a>
                        <a href="/Trader/AppTrader" onclick="setTabTrader('transfers')" class="btn btn-info"><i class="fa fa-th"></i> &nbsp;Trader Transfers</a>
                        @{
                            if (transferType == "saleTransfer")
                            {
                                <a href="/TraderSales/SaleMaster?key=@(Model.Sale?.Key)" class="btn btn-info"><i class="fa fa-eye"></i> &nbsp;View Sale</a>
                            }
                            else if (transferType == "purchaseTransfer")
                            {
                                <a href="/TraderPurchases/PurchaseMaster?id=@(Model.Purchase?.Id)" class="btn btn-info"><i class="fa fa-eye"></i> &nbsp;View Purchase</a>
                            }
                        }
                    </div>
                    <div class="clearfix"></div>

                    <br>

                    <h6 class="subhead">Trader Transfer Approval</h6>
                    <h1 style="line-height: 1.2;">Transfer Process @(Model.Reference?.FullRef?? Model.Id.ToString())</h1>
                    @{
                        transferStatus = Model.Status.GetDescription();
                        var css = "";
                        switch (Model.Status)
                        {
                            case TransferStatus.Initiated:
                                css = StatusLabelStyle.Reviewed;
                                break;
                            case TransferStatus.PendingPickup:
                                css = StatusLabelStyle.Pending;
                                break;
                            case TransferStatus.PickedUp:
                                css = StatusLabelStyle.Reviewed;
                                break;
                            case TransferStatus.Delivered:
                                css = StatusLabelStyle.Approved;
                                break;
                            case TransferStatus.Draft:
                                css = StatusLabelStyle.Draft;
                                break;
                            case TransferStatus.Denied:
                                css = StatusLabelStyle.Denied;
                                break;
                            case TransferStatus.Discarded:
                                css = StatusLabelStyle.Discarded;
                                break;
                        }
                    }
                    <span class="label label-lg @css">@transferStatus</span>
                    <div class="clearfix"></div>


                    <br><br><br>
                    <div class="row">
                        <div class="col-xs-12 col-sm-6">
                            <label>Created</label><br>
                            <p>
                                @Model.CreatedDate.ToString(dateFormatUser + " HH:mm")
                            </p>
                        </div>
                        <div class="col-xs-12 col-sm-6">
                            <label>Creator</label><br>
                            <p><a href="/Community/UserProfilePage?uId=@(Model.CreatedBy.Id)">@HelperClass.GetFullNameOfUser(Model.CreatedBy)</a></p>
                        </div>
                    </div>


                    <br><br>
                    <div class="row">
                        <div class="col-xs-12 col-sm-6">
                            <button class="btn btn-primary community-button" style="margin-bottom: 3px;" data-toggle="modal" data-target="#team-view">
                                <i class="fa fa-users"></i> &nbsp; Team
                            </button>
                        </div>
                        <div class="col-xs-12 col-sm-6">
                            <button class="btn btn-info community-button" data-toggle="modal" data-target="#history-view"><i class="fa fa-history"></i> &nbsp; History</button>
                        </div>
                    </div>

                </div>


            </div>
        </div>
        <!-- Main area -->
        <div class="mdv2-col-dash">

            <div class="spacing">
                <div style="width: 500px; max-width: 100%; margin-bottom: 40px;">
                    @{
                        <div class="alert activity-overview generic" style="margin-bottom: 5px;">

                            <form name="action" method="post" action="" style="padding: 10px 0;">
                                <label for="status">Approval options available to you</label>
                                <div class="input-group" style="width:100%">
                                    @if (Model.TransferApprovalProcess != null)
                                    {
                                        <input type="hidden" id="action_approval_default" value="@Model.TransferApprovalProcess.RequestStatus" />
                                    }
                                    else
                                    {
                                        <input type="hidden" id="action_approval_default" value="" />
                                    }

                                <select @isChange id="action_approval" class="form-control select2" style="width: 100%;" data-placeholder="Please choose...">
                                    @{

                                        if (userRight != "none")
                                        {
                                            switch (userRight)
                                            {
                                                case "initiator":
                                                    <option>@(Model.TransferApprovalProcess?.RequestStatus)</option>
                                                    break;
                                                case "reviewer":
                                                    if (isConsumerDomain)
                                                    {
                                                        <option value="Approved" selected>Delivered</option>
                                                        <option value="Denied">Deny</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="Reviewed" selected>Picked Up</option>
                                                        <option value="Discarded">Discard</option>
                                                    }
                                                    break;
                                                case "approver":
                                                    <option value="Approved" selected>Delivered</option>
                                                    <option value="Pending">Send back to Pending Pickup</option>
                                                    <option value="Denied">Deny</option>
                                                    break;
                                                case "completed":
                                                    <option>
                                                        @{
                                                            var cStatus = "";
                                                            if (Model.TransferApprovalProcess != null)
                                                            {
                                                                switch (Model.TransferApprovalProcess?.RequestStatus)
                                                                {
                                                                    case ApprovalReq.RequestStatusEnum.Pending:
                                                                        cStatus = "Pending Pickup";
                                                                        break;
                                                                    case ApprovalReq.RequestStatusEnum.Reviewed:
                                                                        cStatus = "Picked Up";
                                                                        break;
                                                                    case ApprovalReq.RequestStatusEnum.Approved:
                                                                        cStatus = "Delivered";
                                                                        break;
                                                                    case ApprovalReq.RequestStatusEnum.Denied:
                                                                        cStatus = "Denied";
                                                                        break;
                                                                    case ApprovalReq.RequestStatusEnum.Discarded:
                                                                        cStatus = "Discarded";
                                                                        break;
                                                                }
                                                            }
                                                        }
                                                        @cStatus
                                                    </option>
                                                    break;
                                            }
                                        }
                                        else
                                        {
                                            <option>@transferStatus</option>
                                        }

                                    }
                                </select>
                                    <div id="confirm-button-approval" class="input-group-btn" style="display:none;">
                                        @if (confirm == "")
                                        {
                                            var approvalId = Model.TransferApprovalProcess?.Id.Encrypt();
                                            <button id="btn-transfer-approval" type="button" onclick="javascript:UpdateStatusApproval('@approvalId');" class="btn btn-success @confirm">Confirm</button>

                                        }
                                    </div>
                                </div>
                            </form>
                        </div>
                    }
                </div>


                <br />

                <section class="associated_forms">

                    <ul class="nav nav-pills alt" style="margin: 0 0 30px 0;">
                        <li class="active"><a href="#" data-toggle="tab" data-target="#approval-0">Overview</a></li>
                        <li><a href="#" data-toggle="tab" data-target="#approval-1">Items &amp; Products</a></li>
                        <li><a href="#" data-toggle="tab" data-target="#approval-2">Comments &amp; Files</a></li>
                    </ul>


                    <div class="tab-content">


                        <!-- Overview -->
                        <div class="tab-pane fade in active" id="approval-0">

                            <div class="row">
                                <div class="col-xs-12 col-md-5">
                                    <article class="community-feature" style="margin-bottom: 0;">

                                        <div class="content-block transfer">
                                            <div class="content-block-upper">
                                                @if (Model.Sale != null)
                                                {

                                                    <h2>From @Model.OriginatingLocation.Name</h2>
                                                    if (Model.Sale.SalesChannel == Qbicles.Models.Trader.SalesChannel.SalesChannelEnum.B2C)
                                                    {
                                                        if (Model.OriginatingLocation.Address != null)
                                                        {
                                                            <p>@Html.Raw(Model.OriginatingLocation.Address.ToAddress().Replace(",", "<br />"))</p>
                                                        }
                                                    }
                                                    else if (Model.Sale.DeliveryAddress != null)
                                                    {
                                                        <p>
                                                            <strong>@Model.OriginatingLocation.Name</strong><br />
                                                            @Html.Raw(Model.Sale.DeliveryAddress.ToAddress().Replace(",", "<br />"))

                                                        </p>
                                                    }
                                                }
                                                else if (Model.Purchase != null)
                                                {
                                                    <h2>From @Model.Purchase.Vendor.Name</h2>
                                                    <p>
                                                        <strong>@(Model.Purchase.Vendor?.Name ?? "")</strong><br />
                                                        @Html.Raw(Model.Purchase.Vendor?.Address?.ToAddress().Replace(",", "<br />"))

                                                    </p>
                                                }
                                                else
                                                {
                                                    if (Model.OriginatingLocation == null && Model.Reason == TransferReasonEnum.ManufacturingJobAdjustment)
                                                    {
                                                        <h2>From: Item Manufacturing</h2>
                                                    }
                                                    else
                                                    {
                                                        <h2>From @(Model.OriginatingLocation?.Name)</h2>
                                                        if (Model.OriginatingLocation?.Address != null)
                                                        {
                                                            <p>
                                                                <strong>@Model.OriginatingLocation.Name, </strong><br />
                                                                @Html.Raw(Model.OriginatingLocation.Address.ToAddress().Replace(",", "<br />"))
                                                            </p>
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </article>
                                </div>
                                <div class="col-xs-12 col-sm-2 text-center">
                                    <img src="/Content/DesignStyle/img/icon_delivery.png" style="width: 80px; height: auto; margin: 35px auto;">
                                </div>
                                <div class="col-xs-12 col-md-5">

                                    <article class="community-feature">

                                        <div class="content-block transfer">
                                            <div class="content-block-upper">
                                                @if (Model.Sale != null)
                                                {
                                                    <h2>To @Model.Sale.Purchaser.Name</h2>
                                                    if (Model.Sale.DeliveryAddress != null)
                                                    {
                                                        <p style="text-align: left !important;">
                                                            <strong>@Model.Sale.Purchaser.Name,</strong><br />
                                                            @Html.Raw(Model.Sale.DeliveryAddress.ToAddress().Replace(",", "<br />"))

                                                        </p>
                                                    }
                                                }
                                                else if (Model.Purchase != null)
                                                {
                                                    <h2>To @Model.DestinationLocation.Name</h2>
                                                    if (Model.DestinationLocation.Address != null)
                                                    {
                                                        <p style="text-align: left !important;">
                                                            <strong>@Model.DestinationLocation.Name,</strong><br />
                                                            @Html.Raw(Model.DestinationLocation.Address.ToAddress().Replace(",", "<br />"))
                                                        </p>
                                                    }
                                                }
                                                else
                                                {
                                                    if (Model.DestinationLocation == null && Model.Reason == TransferReasonEnum.ManufacturingJobAdjustment)
                                                    {
                                                        <h2>To: Item Manufacturing</h2>
                                                    }
                                                    else
                                                    {
                                                        <h2>To @(Model.DestinationLocation?.Name)</h2>
                                                        @Html.Raw(Model.DestinationLocation.Address?.ToAddress().Replace(",", "<br />"))
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </article>

                                </div>
                            </div>


                        </div>
                        <!-- END Overview -->
                        <!-- Items & Products -->
                        <div class="tab-pane fade" id="approval-1">

                            <table id="trader-table" class="datatable table-striped" data-order='[[ 1, "asc" ]]' data-info="false" data-paging="false"
                                   data-searching="false" style="width: 100%; background: #fff;">
                                <thead>
                                    <tr>
                                        @if (Model.Sale == null && Model.Purchase == null)
                                        {
                                            <th style="width: 90px;" data-orderable="false" data-priority="3"></th>
                                            <th data-priority="1">Item</th>
                                            <th data-priority="3">Transfer unit</th>
                                            <th data-priority="3">Transfer qty</th>
                                        }
                                        else
                                        {
                                            <th style="width: 90px;" data-orderable="false" data-priority="3"></th>
                                            <th data-priority="1">Item</th>
                                            <th data-priority="2">Unit</th>
                                            <th data-priority="1">Qty</th>
                                            <th data-priority="3">Transfer unit</th>
                                            <th data-priority="3">Transfer qty</th>
                                            @*<th data-priority="1" style="display:none">Remaining</th>*@
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.Sale != null || Model.Purchase != null)
                                    {
                                        foreach (var item in Model.TransferItems)
                                        {
                                            decimal totalTransfer = 0;
                                            decimal remaining = 0;
                                            var totalPurchase = item.TransactionItem.Quantity * item.TransactionItem.Unit?.QuantityOfBaseunit ?? 1;

                                            //var qtty = (item.QuantityAtPickup / item.TransactionItem.Unit?.QuantityOfBaseunit ?? 1).ToDecimalPlace(currencySettings);

                                            if (Model.Sale != null)
                                            {
                                                foreach (var traderTransfer in Model.Sale.Transfer)
                                                {
                                                    foreach (var traderTransferItem in traderTransfer.TransferItems)
                                                    {
                                                        if (traderTransferItem.TransactionItem != null && traderTransferItem.TransactionItem.Id == item.TransactionItem.Id)
                                                        {
                                                            totalTransfer += traderTransferItem.QuantityAtPickup;
                                                        }

                                                    }
                                                }
                                            }
                                            if (Model.Purchase != null)
                                            {
                                                foreach (var traderTransfer in Model.Purchase.Transfer)
                                                {
                                                    foreach (var traderTransferItem in traderTransfer.TransferItems)
                                                    {
                                                        if (traderTransferItem.TransactionItem != null && traderTransferItem.TransactionItem.Id == item.TransactionItem.Id)
                                                        {
                                                            totalTransfer += traderTransferItem.QuantityAtPickup;
                                                        }

                                                    }
                                                }
                                            }
                                            remaining = totalPurchase - totalTransfer;
                                            remaining = remaining / item.TransactionItem.Unit?.QuantityOfBaseunit ?? 1;

                                            <tr>
                                                <td>
                                                    <div class="table-avatar" style="background-image: url('@api@item.TraderItem.ImageUri&size=T');">&nbsp;</div>
                                                </td>
                                                <td>@item.TraderItem.Name</td>
                                                <td>
                                                    @(item.TransactionItem.Unit?.Name??"")
                                                </td>
                                                <td>@(item.TransactionItem.Quantity.ToDecimalPlace(currencySettings))</td>
                                                @*<td>@qtty</td>*@
                                                @*<td>@(item.QuantityAtPickup.ToDecimalPlace(currencySettings))</td>*@
                                                <td>@(item.Unit?.Name??"")</td>
                                                @*<td>@((item.QuantityAtPickup/ item.TransactionItem.Unit?.QuantityOfBaseunit??1).ToDecimalPlace(currencySettings))</td>*@
                                                <td>@(item.QuantityAtPickup.ToDecimalPlace(currencySettings))</td>
                                                @*<td style="display:none">@remaining.ToDecimalPlace(currencySettings)</td>*@
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        if (Model.TransferItems != null)
                                        {
                                            foreach (var item in Model.TransferItems)
                                            {

                                                <tr>
                                                    <td>
                                                        <div class="table-avatar" style="background-image: url('@api@(item.TraderItem?.ImageUri)&size=T');">&nbsp;</div>
                                                    </td>
                                                    <td>@(item.TraderItem?.Name)</td>
                                                    <td>@(item.Unit?.Name)</td>
                                                    <td>@item.QuantityAtPickup.ToDecimalPlace(currencySettings)</td>
                                                </tr>
                                            }
                                        }

                                    }
                                </tbody>
                            </table>

                            <br /><br />
                            @{
                                if (isEdit)
                                {
                                    if (Model.Status != TransferStatus.Delivered)
                                    {
                                        if (Model.TransferApprovalProcess == null || (Model.TransferApprovalProcess != null && Model.TransferApprovalProcess.RequestStatus == ApprovalReq.RequestStatusEnum.Pending))
                                        {
                                            if (Model.Sale == null && Model.Purchase != null)
                                            {
                                                <a href="javascript:void(0);" data-toggle="modal" id="btn_change_@Model.Id" onclick="ShowEditPurchaseTransfer(@Model.Id, @Model.Purchase.Id)" data-target="#app-trader-purchase-transfer" class="btn btn-warning"><i class="fa fa-pencil"></i> &nbsp; Edit items</a>
                                            }
                                            else if (Model.Sale != null && Model.Purchase == null)
                                            {
                                                <a href="javascript:void(0);" data-toggle="modal" id="btn_change_@Model.Id" onclick="ShowEditSaleTransfer(@Model.Id, '@Model.Sale.Key')" data-target="#app-trader-sale-transfer" class="btn btn-warning"><i class="fa fa-pencil"></i> &nbsp; Edit items</a>
                                            }
                                            else
                                            {
                                                <a href="javascript:void(0);" data-toggle="modal" id="btn_change_@Model.Id" onclick="ShowEditTransfer(@Model.Workgroup.Location.Id, @Model.Id)" data-target="#app-trader-edit-items" class="btn btn-warning"><i class="fa fa-pencil"></i> &nbsp; Edit items</a>
                                            }
                                        }

                                    }
                                }
                            }
                        </div>
                        <!-- END Items & Products -->
                        <!-- Comments & Files -->
                        <div class="tab-pane fade" id="approval-2">
                            <div class="app_topnav entity_adds" style="background: #fff; padding: 0;">
                                <ul class="nav nav-pills app_main_nav">
                                    <li role="presentation" class="active">
                                        <a href="#tab1" data-toggle="tab">
                                            <i class="fa fa-comments"></i>
                                            Comments
                                        </a>
                                    </li>
                                    <li role="presentation">
                                        <a href="#tab2" data-toggle="tab">
                                            <i class="fa fa-folder-open"></i>
                                            Files
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <br />
                            <br />
                            <div class="row">
                                <div class="col-xs-12">
                                    <div class="tab-content">
                                        <div class="tab-pane fade in active" id="tab1">
                                            <div class="row">
                                                <div class="col-xs-12">
                                                    <div class="well" style="max-width: 800px;">
                                                        <div class="form-group">
                                                            <label for="add-comment">Add a comment</label>
                                                            <textarea id="txt-comment-approval" name="add-comment" class="form-control"></textarea>
                                                        </div>
                                                        <button onclick="addCommentForApproval('@(Model.TransferApprovalProcess?.Key ?? "")')" class="btn btn-success">Submit</button>
                                                    </div>
                                                    <br />
                                                </div>
                                            </div>
                                            <div id="list-comments-approval">
                                                @if (Model.TransferApprovalProcess != null)
                                                {
                                                    foreach (var post in Model.TransferApprovalProcess.Posts.OrderByDescending(x => x.StartedDate).Take(pageSize))
                                                    {

                                                        <!-- General post -->
                                                        var fullName = HelperClass.GetFullNameOfUser(post.CreatedBy, userId);
                                                        <article id="post-@post.Id" class="activity post">
                                                            <img style="background-image: url('@api@post.CreatedBy.ProfilePic')" class="activity-avatar" />
                                                            <div class="activity-detail">
                                                                <div class="activity-meta">
                                                                    <h4>@fullName</h4>
                                                                    <small>@post.StartedDate.ConvertTimeFromUtc(timeZone).ToString(dateFormatUser + ", hh:mmtt")</small>
                                                                </div>
                                                                <div class="activity-overview media-comment">
                                                                    <p>
                                                                        @Html.Raw(post.Message.Replace(Environment.NewLine, "<br />"))
                                                                    </p>
                                                                </div>
                                                            </div>
                                                            <div class="clearfix"></div>
                                                        </article>
                                                        <!-- END General post -->
                                                    }
                                                }

                                            </div>
                                            @if (Model.TransferApprovalProcess != null && Model.TransferApprovalProcess.Posts.Count() > pageSize)
                                            {
                                                <button id="btnLoadPosts" onclick="LoadMorePosts('@Model.TransferApprovalProcess.Key', @pageSize,'list-comments-approval')" class="btn btn-info trigger_load">Load older posts</button>
                                            }
                                        </div>

                                        <div class="tab-pane fade" id="tab2">
                                            <br />
                                            <a href="javascript:void(0)" class="btn btn-success" id="btnAddFile" data-toggle="modal" data-target="#create-media"><i class="fa fa-upload"></i> &nbsp; Upload a file</a>

                                            <br /><br />
                                            <div id="list-medias">
                                                @if (Model.TransferApprovalProcess != null && Model.TransferApprovalProcess.SubActivities.Count > 0)
                                                {
                                                    foreach (var item in Model.TransferApprovalProcess.SubActivities.OrderByDescending(x => x.Id).Take(pageSize))
                                                    {
                                                        var media = (QbicleMedia)item;
                                                        var createdByName = HelperClass.GetFullNameOfUser(media.StartedBy, userId);
                                                        var createdDate = media.StartedDate.Date == DateTime.UtcNow.Date ? "Today, " + media.StartedDate.ConvertTimeFromUtc(timeZone).ToString("hh:mmtt").ToLower() : media.StartedDate.ConvertTimeFromUtc(timeZone).ToString(dateFormatUser + " hh:mmtt").ToLower();
                                                        var mediaLastupdate = media.VersionedFiles.Where(e => !e.IsDeleted).OrderByDescending(x => x.UploadedDate).First() ?? null;
                                                        var lastUpdateFile = mediaLastupdate != null ? (mediaLastupdate.UploadedDate.Date == DateTime.UtcNow.Date ? "Today, " + mediaLastupdate.UploadedDate.ConvertTimeFromUtc(timeZone).ToString("hh:mmtt").ToLower() : mediaLastupdate.UploadedDate.ConvertTimeFromUtc(timeZone).ToString(dateFormatUser + " hh:mmtt").ToLower()) : createdDate;
                                                        //Media post
                                                        <article class="activity media">
                                                            <img style="background-image: url('@api@media.StartedBy.ProfilePic')" class="activity-avatar" />
                                                            <div class="activity-detail">
                                                                <div class="activity-meta">
                                                                    <h4>@createdByName</h4>
                                                                    <small>@createdDate</small>
                                                                    <br class="visible-xs">
                                                                </div>
                                                                <div class="activity-overview media">
                                                                    <div class="row">
                                                                        <div class="col-xs-12 col-sm-5 col-md-6 col-lg-5">
                                                                            <a href="javascript:void(0)" onclick="ShowMediaPage('@media.Key')">
                                                                                @if (media.FileType.Type == "Image File")
                                                                                {
                                                                                    <img id="media-@item.Id" class="img-responsive" src='@api@mediaLastupdate.Uri' />
                                                                                }
                                                                                else
                                                                                {
                                                                                    <img src="@media.FileType.IconPath" class="img-responsive">
                                                                                }
                                                                            </a>
                                                                        </div>
                                                                        <div class="col-xs-12 col-sm-7 col-md-6 col-lg-7 description">
                                                                            <h5>@media.Name</h5>
                                                                            <p>
                                                                                @media.Description
                                                                            </p>
                                                                            <small>@media.FileType.Type | Update @lastUpdateFile</small>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="clearfix"></div>
                                                        </article>
                                                        <!-- END Media post -->
                                                    }
                                                }
                                            </div>
                                            @if (Model.TransferApprovalProcess != null && Model.TransferApprovalProcess.SubActivities.Count() > pageSize)
                                            {
                                                <button id="btnLoadMedias" onclick="LoadMoreMedias(@Model.TransferApprovalProcess.Id,@pageSize,'list-medias')" class="btn btn-info trigger_load">Load older medias</button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- END Comments & Files -->
                    </div>

                </section>

            </div>

        </div>
    </section>
    <!-- ./content -->

</div>
<!-- /.content-wrapper -->

@{
    Html.RenderAction("GenerateModalMedia", "Qbicles");
}
<div class="modal fade left" id="app-trader-edit-items" role="dialog" aria-labelledby="app-trader-edit-items">
    <!-- /.modal-dialog -->
</div><!-- /.modal -->
<div class="modal fade left" id="app-trader-sale-transfer" role="dialog" aria-labelledby="app-trader-sale-transfer">

</div><!-- /.modal -->
<div class="modal fade left" id="app-trader-purchase-transfer" role="dialog" aria-labelledby="app-trader-purchase-transfer">

</div><!-- /.modal -->
<div class="modal fade left" id="app-trader-workgroup-preview" role="dialog" aria-labelledby="app-trader-workgroup-preview">

</div><!-- /.modal -->
<div class="modal fade left" id="team-view" role="dialog" aria-labelledby="team-view">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h5 class="modal-title">Team Members</h5>
            </div>
            <div class="modal-body">

                <div class="row">
                    <div class="col-xs-12">
                        <ul class="app_subnav">
                            <li class="active"><a href="#initiators" data-toggle="tab">Initiators</a></li>
                            <li><a href="#reviewers" data-toggle="tab">Reviewers</a></li>
                            <li><a href="#approvers" data-toggle="tab">Approvers</a></li>
                        </ul>
                    </div>
                </div>

                <br />

                <div class="tab-content">


                    <div class="tab-pane fade in active" id="initiators">

                        <ul class="avatar-listing team unstyled" style="margin-bottom: 0 !important;">
                            <li>
                                <a href="/Community/UserProfilePage?uId=@(Model.CreatedBy.Id)" target="_blank">
                                    <div class="owner-avatar">
                                        <div class="avatar-sm" style="background: url('@(api+ Model.CreatedBy.ProfilePic)');"></div>
                                    </div>
                                    <h5>@HelperClass.GetFullNameOfUser(Model.CreatedBy)<br><small>@HelperClass.isInitiatorReviewerApprover(Model.CreatedBy, Model.CreatedBy, reviewers, approvers)</small></h5>
                                </a>
                            </li>
                        </ul>

                    </div>



                    <div class="tab-pane fade" id="reviewers">

                        <ul class="avatar-listing team unstyled" style="margin-bottom: 0 !important;">
                            @foreach (var item in reviewers)
                            {
                                <li>
                                    <a href="/Community/UserProfilePage?uId=@item.Id" target="_blank">
                                        <div class="owner-avatar">
                                            <div class="avatar-sm" style="background: url('@(api+ item.ProfilePic)');"></div>
                                        </div>
                                        <h5>@HelperClass.GetFullNameOfUser(item)<br><small>@HelperClass.isInitiatorReviewerApprover(item, Model.CreatedBy, reviewers, approvers)</small></h5>
                                    </a>
                                </li>
                            }
                        </ul>

                    </div>

                    <div class="tab-pane fade" id="approvers">
                        <ul class="avatar-listing team unstyled" style="margin-bottom: 0 !important;">
                            @foreach (var item in approvers)
                            {
                                <li>
                                    <a href="/Community/UserProfilePage?uId=@item.Id" target="_blank">
                                        <div class="owner-avatar">
                                            <div class="avatar-sm" style="background: url('@(api+ item.ProfilePic)');"></div>
                                        </div>
                                        <h5>@HelperClass.GetFullNameOfUser(item)<br><small>@HelperClass.isInitiatorReviewerApprover(item, Model.CreatedBy, reviewers, approvers)</small></h5>
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>

                </div>

                <br /><br />
                <button class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<div class="modal fade left" id="history-view" role="dialog" aria-labelledby="history-view">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h5 class="modal-title">Approval history</h5>
            </div>
            <div class="modal-body">
                <ul class="timeline">
                    @if (timelineDate != null)
                    {
                        foreach (var date in timelineDate)
                        {
                            var dateStart = date.ConvertTimeFromUtc(timeZone).DatetimeToOrdinal();
                            var dateStr = date.Date == today.Date ? "Today" : dateStart;

                            <li class="time-label">
                                <span class="label label-lg label-primary">
                                    @dateStr
                                </span>
                            </li>
                            foreach (var tl in timeline.Where(d => d.LogDate.Date == date.Date))
                            {
                                <li>
                                    <div class="person" style="background-image: url('@(api+tl.UserAvatar)');"></div>
                                    <div class="timeline-item">
                                        <span class="time"><i class="fa fa-clock-o"></i> @tl.Time</span>
                                        <h4 class="timeline-header">@tl.Status</h4>
                                    </div>
                                </li>
                            }
                        }
                    }
                </ul>
                <br />
                <button class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
@{
    if (System.Diagnostics.Debugger.IsAttached)
    {
        <script src="~/Scripts/dev/trader.transfer.review.js"></script>
        <script src="~/Scripts/dev/trader.transfer.quantity.change.js"></script>
        <script src="~/Scripts/dev/trader.domain.js"></script>
    }
    else
    {
        <script src="~/Scripts/dev/trader.transfer.review.js"></script>
        <script src="~/Scripts/dev/trader.transfer.quantity.change.js"></script>
        <script src="~/Scripts/dev/trader.domain.min.js"></script>
    }
}
<script>
    $(document).ready(function () {
        $("#confirm-button-approval").show();
    });
</script>