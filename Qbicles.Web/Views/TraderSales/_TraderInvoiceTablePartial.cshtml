@using Qbicles.Models.Trader;
@using Qbicles.BusinessRules;
@model TraderSale
@{
    var api = (string)ViewBag.DocRetrievalUrl;
    var callBack = (bool)ViewBag.CallBack;
    var domainId = (int)ViewBag.CurrentDomainId;
    var currencySettings = (Qbicles.Models.CurrencySetting)ViewBag.CurrencySettings;
}
<table class="datatable table-hover" id="tradersale_invoice_table" data-order='[[1, "desc"]]' style="background: #fff; width: 100%;" data-paging="false">
    <thead>
        <tr>
            <th>Date</th>
            <th>Ref</th>
            <th>Amount <strong>(@currencySettings.CurrencySymbol)</strong></th>
            <th>Status</th>
            <th>Payments</th>
            <th data-orderable="false">Options</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Invoices)
        {
            <tr>
                <td>@item.DueDate.ToString("dd.MM.yyyy")</td>
                <td>
                    #@if (item.Reference != null)
                    {
                        @item.Reference.FullRef
                    }
                </td>
                <td>@item.TotalInvoiceAmount.ToDecimalPlace(currencySettings)</td>
                <td>
                    @switch (item.Status)
                    {
                        case TraderInvoiceStatusEnum.Draft:
                            <span class="label label-lg label-primary">Draft</span>
                            break;
                        case TraderInvoiceStatusEnum.PendingReview:
                            <span class="label label-lg label-warning">Pending Review</span>
                            break;
                        case TraderInvoiceStatusEnum.PendingApproval:
                            <span class="label label-lg label-warning">Pending Approval</span>
                            break;
                        case TraderInvoiceStatusEnum.InvoiceDenied:
                            <span class="label label-lg label-danger">Invoice Denied</span>
                            break;
                        case TraderInvoiceStatusEnum.InvoiceApproved:
                            <span class="label label-lg label-success">Invoice Approved</span>
                            break;
                        case TraderInvoiceStatusEnum.InvoiceDiscarded:
                            <span class="label label-lg label-danger">Invoice Discarded</span>
                            break;
                        case TraderInvoiceStatusEnum.InvoiceIssued:
                            <span class="label label-lg label-success">Invoice Approved</span>
                            break;
                        default:
                            <span class="label label-lg label-warning">Pending Review</span>
                            break;
                    }

                </td>
                <td>@item.Payments.Count</td>
                <td>
                    @if (item.Status == TraderInvoiceStatusEnum.Draft)
                    {
                        <button class="btn btn-info" onclick="EditInvoice(@item.Id, '@Model.Key')" data-toggle="modal" data-target="#app-trader-invoice-add"><i class="fa fa-pencil"></i> &nbsp; Continue</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" onclick="window.location.href='/TraderInvoices/InvoiceManage?key=@item.Key'"><i class="fa fa-eye"></i> &nbsp; Manage</button>
                    }

                </td>
            </tr>
        }
    </tbody>
</table>





@if (callBack)
{
    <script>
        $('#tradersale_invoice_table').DataTable({
            responsive: true,
            "lengthChange": true,
            "pageLength": 10,
            "columnDefs": [{
                "targets": 3,
                "orderable": false
            }],
            "order": []
        });

        $('#tradersale_invoice_table').show();
    </script>
}
