@using Qbicles.BusinessRules;
@using Qbicles.Models;
@model QbicleTask
@{
    ViewBag.Title = ViewBag.PageTitle;

    var b2cMember = (bool)ViewBag.B2CMember;

    var QbicleName = (string)ViewBag.QbicleName;
    var taskPrioritys = (ICollection<HelperClass.EnumModel>)ViewBag.TaskPriority;
    var UserRoleRights = (List<string>)ViewBag.UserRoleRights;
    string closed = Model.ClosedBy != null ? "true" : "false";
    var currentUser = (ApplicationUser)ViewBag.CurrentUser;
    var createdTaskBy = HelperClass.GetFullNameOfUser(Model.StartedBy, currentUser.Id);
    var currentDomainId = (int)ViewBag.CurrentDomainId;
    var api = (string)ViewBag.DocRetrievalUrl;
    var pageSize = HelperClass.activitiesPageSize;
    var watchers = Model.AssociatedSet != null ? Model.AssociatedSet.Peoples.Where(s => s.User.Id != Model.StartedBy.Id).ToList() : null;
    var StepInstance = Model.QStepinstances;
    var Percent = 0;
    if (StepInstance.Count > 0)
    {
        foreach (var item in StepInstance)
        {
            Percent += item.Step.Weight;
        }
    }
    var Comments = Model.Posts.OrderByDescending(x => x.StartedDate).Take(pageSize);
    var count_Comments = Model.Posts.Count();
    var count_Medias = Model.SubActivities.Count();
    var Performance = Model.QPerformances.FirstOrDefault();
    var Deadline = Model.ProgrammedStart;
    if (Model.DurationUnit == QbicleTask.TaskDurationUnitEnum.Days)
    {
        Deadline = Model.ProgrammedStart.HasValue ? Model.ProgrammedStart.Value.AddDays(Model.Duration) : DateTime.UtcNow;
    }
    else if (Model.DurationUnit == QbicleTask.TaskDurationUnitEnum.Hours)
    {
        Deadline = Model.ProgrammedStart.HasValue ? Model.ProgrammedStart.Value.AddHours(Model.Duration) : DateTime.UtcNow;
    }
    else
    {
        Deadline = Model.ProgrammedStart.HasValue ? Model.ProgrammedStart.Value.AddDays(Model.Duration * 7) : DateTime.UtcNow;
    }
    var showworklog = false;
    if (Model.StartedBy.Id == currentUser.Id || watchers.Any(s => s.Type == QbiclePeople.PeopleTypeEnum.Assignee && s.User.Id == currentUser.Id))
    {
        showworklog = true;
    }
    var showReview = Model.QPerformances.Count > 0 ? false : true;
    var Relates = Model.AssociatedSet != null ? Model.AssociatedSet.Relateds : new List<QbicleRelated>();
    var dateFormat = (string)ViewBag.CurrentDateFormat;
    var timeZone = (string)ViewBag.CurrentTimeZone;
    var isAbleToReview = (bool)ViewBag.IsAbleToReview;
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper qbicle-detail mdv2-wrapper" style="position: relative;">
    <input type="hidden" id="taskId" value="@Model.Id" />
    <input type="hidden" id="taskKey" value="@Model.Key" />
    <!-- Main content -->
    <section class="mdv2 dash" data-tooltip-color="teal" data-tooltip-delay="300" data-tooltip-animate-function="spin" style="border-top: 1px solid #f1f1f1;">
        <!-- App bar -->
        <div class="mdv2-col-app" style="margin-bottom: 0;">
            <div data-spy="affix" class="contained-sidebar">
                <div class="activity-overview plain company-overview welcome-info" style="text-align: left !important; flex: none; margin: 0; padding-top: 30px; padding-bottom: 0;">
                    <div class="pull-left" style="margin-bottom: 15px;">
                        <a onclick="QbicleSelected('@Model.Qbicle.Key','Dashboard')" class="btn btn-info"><i class="fa fa-angle-up"></i> &nbsp; Qbicle</a>
                        @if (!Model.isComplete && (Model.StartedBy.Id == currentUser.Id || currentUser.DomainAdministrators.Any(x => x.Id == @currentDomainId)))
                        {
                            <a id="btn-task-edit" href="#create-task" data-toggle="modal" class="btn btn-warning"><i class="fa fa-pencil"></i> &nbsp; Edit</a>
                        }
                    </div>
                    <div class="clearfix"></div>
                    <br />
                    <h1 style="line-height: 1.2;">@Model.Name</h1>
                    <br />
                    @if (!Model.isComplete && Model.ActualStart.HasValue && Model.ProgrammedEnd.HasValue && Model.ActualStart.Value < Model.ProgrammedEnd.Value)
                    {
                        TimeSpan Time = Model.ProgrammedEnd.Value - Model.ActualStart.Value;
                        <span id="countdown_task" class="label label-lg label-default countdown">@string.Format("{0}d {1}h {2}m", Time.Days, Time.Hours, Time.Minutes)</span>
                    }

                    <span class="label label-lg label-primary">@(Model.Topic != null ? Model.Topic.Name : "")</span>
                    <span class="label label-lg label-info" id="notstarted" style="@(!Model.isComplete && Model.ActualStart == null?"":"display: none;")">Not started</span>
                    <span class="label label-lg label-warning" id="inprogress" style="@(!Model.isComplete && Model.ActualStart != null?"":"display: none;")">In progress</span>
                    <span class="label label-lg label-success" id="complete" style="@(Model.isComplete?"":"display: none;")">Complete</span>
                    <br /><br /><br />
                    <p style="color: rgba(0, 0, 0, 0.5);">@Model.Description</p>
                    <br /><br />
                    <div class="row">
                        <div class="col-xs-@(Model.isRecurs?"6":"12")">
                            <label>Deadline</label>
                            <p><span id="task-deadline" class="countdown">@(Deadline.HasValue ? Deadline.Value.FormatDatetimeOrdinal() : "")</span></p>
                        </div>

                        @if (Model.isRecurs)
                        {
                            <div class="col-xs-6">
                                <label>Recurring</label>
                                <p>@Utility.ShowRecurring(Model.AssociatedSet.Recurrance, Model.ProgrammedStart.HasValue ? Model.ProgrammedStart.Value.ToString("\"at\" h:mmtt").Replace(":00", "").ToLower() : "")</p>
                            </div>
                        }
                    </div>
                    @if (Model.ActualStart == null)
                    {
                        <button class="btn btn-success community-button" type="button" style="margin-top: 30px;" onclick="StartProgress(this)">
                            @if (Model.isSteps)
                            {
                                <i class="fa fa-stopwatch"></i><span>&nbsp;Start progress</span>//step - no recurrence
                            }
                            else
                            {
                                <i class="fa fa-check"></i><span>&nbsp;Mark as complete</span>//no step - no recurence
                            }
                        </button>
                    }
                    <div class="completion" style="margin: 30px 0;@(Model.ActualStart == null&&!Model.isComplete?"display: none":"");">
                        @if (Model.isSteps)
                        {
                            <h5>Completion</h5>
                            <div class="mdv2-progress" style="margin-bottom: 30px;">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: @Percent%" aria-valuenow="@Percent" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                                <small class="pull-left"><span class="percent-task">@Percent%</span> complete</small>
                                <p class="pull-right" style="position: relative; top: 3px;"><span class="count-steps">@(Model.QSteps != null ? Model.QSteps.Count : 0)</span> to-dos</p>
                                <div class="clearfix"></div>
                            </div>
                        }
                        @if (isAbleToReview)
                        {
                            <button class="btn btn-primary community-button performance-popup" style="display:@(Model.isComplete&&showReview?"block":"none")" data-toggle="modal" data-target="#performance-review">
                                <i class="fa fa-trophy"></i> &nbsp; Performance review
                            </button>
                        }
                        <div class="performance" style="@(Model.isComplete?"":"display: none;") margin: 30px 0 60px 0;">
                            <h5>Performance rating</h5>
                            @for (int i = 1; i < 6; i++)
                            {
                                <i class="fa fa-star star-@i" style="color: @(Performance!=null&&i<=Performance.Rating?"#fc8b02":"#f1f1f1");"></i>
                            }
                            &nbsp; &nbsp; <small>@(Performance != null ? Performance.Rating.ToString() : "0") out of 5</small>
                        </div>
                    </div>

                </div>
            </div>
        </div>
        <!-- END App bar -->
        <!-- Main area -->
        <div class="mdv2-col-dash">
            <ul class="subapps-nav" role="navigation" data-tooltip-stickto="bottom">
                @if (Model.isSteps)
                {
                    <li class="active">
                        <a href="#" data-toggle="tab" data-target="#task-map" data-tooltip="To-dos">
                            <i class="fa fa-sitemap"></i>
                        </a>
                    </li>
                }
                <li class="@(!Model.isSteps?"active":"")">
                    <a href="#" data-toggle="tab" data-target="#task-time" data-tooltip="Time logging">
                        <i class="fa fa-clock-o"></i>
                    </a>
                </li>
                <li>
                    <a href="#" data-toggle="tab" data-target="#task-team" data-tooltip="Watchers">
                        <i class="fa fa-users"></i>
                    </a>
                </li>
                <li>
                    <a href="#" data-toggle="tab" data-target="#task-discuss" data-tooltip="Discuss">
                        <i class="fa fa-comment-alt"></i>
                    </a>
                </li>
            </ul>
            <div class="tab-content" style="padding-bottom: 30px;">
                @if (Model.isSteps)
                {
                    <!-- Map -->
                    <div class="tab-pane fade in active" id="task-map">
                        @if (Model.ActualStart == null)
                        {
                            <div class="activity-overview generic help-text animated bounce" id="disabledchecks" style="margin: 30px 30px 30px 40px;">
                                <i class="fa fa-info-circle"></i>
                                <p>Your checklist steps won't be available until you indicate you’ve started progress!</p>
                            </div>
                        }
                        <div class="block-content task-breakdown" style="padding: 0 15px !important;">
                            <ul>
                                @foreach (var item in Model.QSteps.OrderBy(s => s.Order))
                                {
                                    <li>
                                        <a href="#">
                                            <div class="row">
                                                @{var complete = StepInstance.Any(s => s.Step.Id == item.Id);}
                                                <div class="col-xs-12 @(complete?"completed-info":"")">
                                                    @if (complete)
                                                    {
                                                        <i style="width: 25px;" class="fa fa-check-circle green"></i>
                                                    }
                                                    else
                                                    {
                                                        <input type="checkbox" id="StepInstance_@item.Id" name="StepInstance" value="@item.Id" style="position: relative; top: 1.5px;" @(Model.ActualStart != null ? "" : "disabled")>
                                                    }
                                                    &nbsp;&nbsp;<p>@item.Name</p>
                                                    <small class="supplemental">@item.Description</small>
                                                </div>
                                            </div>
                                        </a>
                                    </li>
                                }
                            </ul>

                            <button class="btn btn-success confirm community-button" onclick="ConfirmChanges(this)" style="max-width: 200px; margin-top: 30px; display: none;">Confirm changes</button>
                        </div>

                    </div>
                }
                <!-- END Map -->
                <!-- Team -->
                <div class="tab-pane fade" id="task-team">

                    <ul class="widget-contacts task-participants" style="padding: 0 15px;">
                        <li>
                            <a href="#">
                                <div class="contact-avatar">
                                    <div style="background-image: url('@(api+Model.StartedBy.ProfilePic)&size=T');">&nbsp;</div>
                                </div>
                                <div class="contact-info">
                                    <h5>@(currentUser.Id == Model.StartedBy.Id ? "Me" : HelperClass.GetFullNameOfUser(Model.StartedBy))</h5>
                                </div>
                            </a>
                        </li>
                        @if (watchers != null)
                        {
                            foreach (var item in watchers)
                            {
                                <li>
                                    <a href="#">
                                        <div class="contact-avatar">
                                            <div style="background-image: url('@(api+item.User.ProfilePic)&size=T');">&nbsp;</div>
                                        </div>
                                        <div class="contact-info">
                                            <h5>@HelperClass.GetFullNameOfUser(item.User, currentUser.Id)</h5>
                                        </div>
                                    </a>
                                </li>
                            }
                        }
                    </ul>



                </div>
                <!-- END Team -->
                <!-- Time logging -->
                <div class="tab-pane fade @(!Model.isSteps?"in active":"")" id="task-time">

                    <div class="subspacing">

                        <div class="row">
                            <div class="col-xs-12">

                                <table class="table app_specific">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>My hours</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (Model.QTimeSpents != null && Model.QTimeSpents.Count > 0)
                                        {
                                            foreach (var item in Model.QTimeSpents)
                                            {
                                                <tr>
                                                    <td>@item.DateTime.ToString("dddd dd\"th\" MMMM yyyy")</td>
                                                    <td>@(item.Days > 0 ? item.Days + "d" : "") @(item.Hours > 0 ? item.Hours + "h" : "") @(item.Minutes > 0 ? item.Minutes + "m" : "")</td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr class="row-nodata"><td colspan="2">No hours have been logged yet</td></tr>
                                        }
                                    </tbody>
                                </table>


                                <br /><br />
                                @if (showworklog)
                                {
                                    <label>Log work hours</label><br />
                                    <div class="well custom" style="width: 400px; max-width: 100%;">
                                        <div class="row">
                                            <div class="col-xs-4">
                                                <label for="est-days">Days</label><br />
                                                <input type="number" min="0" name="est-days" class="form-control" value="0">
                                            </div>
                                            <div class="col-xs-4">
                                                <label for="est-hours">Hours</label><br />
                                                <input type="number" min="0" name="est-hours" class="form-control" value="0">
                                            </div>
                                            <div class="col-xs-4">
                                                <label for="est-mins">Minutes</label><br />
                                                <input type="number" min="0" name="est-mins" class="form-control" value="0">
                                            </div>
                                        </div>

                                        <br />
                                        <button type="button" class="btn btn-info btn-addworklog">Add to work log</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                </div>
                <!-- END Time logging -->
                <!-- Discuss -->
                <div class="tab-pane fade" id="task-discuss">

                    <div class="spacing" style="padding-top: 0;">


                        <div class="row">
                            <div class="col-xs-12">
                                <ul class="app_subnav admintabs" style="padding-top: 0;">
                                    <li class="active"><a href="#task-comments" data-toggle="tab">Comments</a></li>
                                    <li><a href="#task-files" data-toggle="tab">Files</a></li>
                                </ul>
                            </div>
                        </div>
                        <br />
                        <div class="tab-content">
                            <!-- Comments -->
                            <div class="tab-pane fade in active" id="task-comments">
                                <div class="well custom" style="margin-bottom: 60px;">
                                    <div class="row">
                                        <div class="col-xs-12">
                                            <div class="form-group">
                                                <label for="add-comment">Add a comment</label>
                                                <textarea id="txt-comment-task" name="addcomment" onkeyup="validateAddCommentTask()" style="height: 80px;" class="form-control"></textarea>
                                                <label id="addcomment-error" class="error" for="addcomment" style="display: none;">Your post is longer than the 1,500 character limit. Please reduce the length, or split it across multiple posts</label>
                                            </div>
                                        </div>
                                    </div>

                                    <button class="btn btn-success" onclick="AddCommentToTask('@Model.Key')">Submit</button>
                                </div>
                                <div id="list-comments-task">
                                    @if (Comments != null && count_Comments > 0)
                                    {
                                        foreach (var item in Comments)
                                        {
                                            <!-- General post -->
                                            <article id="post-@item.Id" class="activity post">
                                                <div class="activity-avatar" style="background-image: url('@(api+item.CreatedBy.ProfilePic)&size=T');"></div>
                                                <div class="activity-detail">
                                                    <div class="activity-meta">
                                                        <h4>@HelperClass.GetFullNameOfUser(item.CreatedBy, currentUser.Id)</h4>
                                                        <small>@item.StartedDate.ConvertTimeFromUtc(timeZone).ToString(dateFormat + ", hh:mmtt")</small>
                                                    </div>

                                                    <div class="activity-overview media-comment">
                                                        <p>@Html.Raw(item.Message.Replace(Environment.NewLine, "<br/>"))</p>
                                                    </div>
                                                </div>
                                                <div class="clearfix"></div>
                                            </article>
                                            <!-- END General post -->
                                        }
                                    }
                                </div>
                                @if (count_Comments > pageSize)
                                {
                                    <button id="btnLoadPosts" onclick="LoadMorePosts('@Model.Key', @pageSize, 'list-comments-task')" class="btn btn-info trigger_load">Load older medias</button>
                                }
                            </div>
                            <!-- END Comments -->
                            <!-- Files -->
                            <div class="tab-pane fade" id="task-files">
                                @if (Model.ClosedBy == null)
                                {
                                    <button class="btn btn-success community-button" data-toggle="modal" data-target="#create-media" style="max-width: 230px; margin: 15px 0 30px 0;">
                                        <i class="fa fa-upload"></i> &nbsp; Add a file
                                    </button>
                                }
                                <div id="list-medias">
                                    @if (count_Medias > 0)
                                    {
                                        foreach (var item in Model.SubActivities.OrderByDescending(x => x.Id).Take(pageSize))
                                        {
                                            var media = (QbicleMedia)item;
                                            var createdByName = media.StartedBy.Id == currentUser.Id ? "Me" : HelperClass.GetFullNameOfUser(media.StartedBy);
                                            var createdDate = media.StartedDate.Date == DateTime.UtcNow.Date ? "Today, " + media.StartedDate.ToString("hh:mmtt") : media.StartedDate.ToString(dateFormat + " hh:mmtt");
                                            var lastUpdateFile = "";
                                            var mediaLastupdate = media.VersionedFiles.Where(e => !e.IsDeleted).OrderByDescending(x => x.UploadedDate).FirstOrDefault() ?? null;
                                            if (mediaLastupdate != null)
                                            {
                                                lastUpdateFile = mediaLastupdate?.UploadedDate.Date == DateTime.UtcNow.Date ? "Today, " + mediaLastupdate.UploadedDate.ToString("hh:mmtt") : mediaLastupdate.UploadedDate.ToString(dateFormat + " hh:mmtt");
                                            } //Media post
                                            <!-- Media post -->
                                            <article class="activity media">
                                                <div class="activity-avatar" style="background-image: url('@api@(media.StartedBy.ProfilePic)&size=T');"></div>
                                                <div class="activity-detail" style="width: 100%; max-width: 100%;">
                                                    <div class="activity-meta">
                                                        <h4>@createdByName</h4>
                                                        <small>@createdDate</small>
                                                        <br class="visible-xs">
                                                    </div>

                                                    <div class="activity-overview media">
                                                        <div class="row">
                                                            <div class="col-xs-12 col-sm-5 col-lg-4">
                                                                <a href="javascript:void(0)" onclick="ShowMediaPage('@media.Key')">
                                                                    @if (media.FileType.Type == "Image File")
                                                                    {
                                                                        <img id="media-@item.Id" class="img-responsive" src='@api@(mediaLastupdate.Uri)&size=M' />
                                                                    }
                                                                    else
                                                                    {
                                                                        <img src="@media.FileType.ImgPath" class="img-responsive">
                                                                    }
                                                                </a>
                                                            </div>
                                                            <div class="col-xs-12 col-sm-7 col-lg-8 description" style="padding-top: 0;">
                                                                <h5>@media.Name</h5>
                                                                <p>
                                                                    @media.Description
                                                                </p>
                                                                <small>@Utility.GetFileTypeDescription(media.FileType.Extension) | Update @lastUpdateFile</small>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="clearfix"></div>
                                            </article>
                                            <!-- END Media post -->
                                        }
                                    }
                                    @if (count_Medias > pageSize)
                                    {
                                        <button id="btnLoadMedias" onclick="LoadMoreMedias(@Model.Id, @pageSize, 'list-medias')" class="btn btn-info trigger_load">Load older medias</button>
                                    }
                                </div>
                            </div>
                            <!-- END Files -->
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <!-- Right side -->
        @if (Relates != null && Relates.Count > 0)
        {
            <div class="mdv2-col-user">

                <h5 style="margin: 0; padding: 0 0 20px 0;">Related activities</h5>
                @foreach (var item in Relates)
                {
                    if (item.Activity.ActivityType == QbicleActivity.ActivityTypeEnum.TaskActivity)
                    {
                        var activity = item.Activity as QbicleTask;
                        var domain = activity.Qbicle.Domain;
                        var qbicle = activity.Qbicle;
                        var stepPercent = activity.QSteps.Where(s => s.StepInstance.Any(st => st.isComplete)).Sum(s => s.Weight);
                        <div class="mdv2-activity" style="height: auto; margin-bottom: 15px;">
                            <span class="status green"></span>
                            <ul class="breadcrumb">
                                <li><a href="#" onclick="DomainSelected('@domain.Key','')">@domain.Name</a></li>
                                <li><a href="#" onclick="QbicleSelected('@qbicle.Key', 'Dashboard')">@qbicle.Name</a></li>
                                <li>Task</li>
                            </ul>
                            <a href="javascript:ShowTaskPage('@activity.Key', false);">
                                <h2>@activity.Name</h2>
                            </a>
                            <p>@activity.Description</p>
                            @if (!activity.isComplete && activity.ActualStart != null && activity.ActivityType == QbicleActivity.ActivityTypeEnum.TaskActivity)
                            {
                                <div class="mdv2-progress">
                                    <p class="countdown">...</p>
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" style="width: @stepPercent%" aria-valuenow="@stepPercent" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    <small>@(stepPercent)%</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        var activity = item.Activity as QbicleEvent;
                        var domain = activity.Qbicle.Domain;
                        var qbicle = activity.Qbicle;
                        <div class="mdv2-activity" style="height: auto; margin-bottom: 15px;">
                            <span class="status green"></span>
                            <ul class="breadcrumb">
                                <li><a href="#" onclick="DomainSelected('@domain.Key','')">@domain.Name</a></li>
                                <li><a href="#" onclick="QbicleSelected('@qbicle.Key', 'Dashboard')">@qbicle.Name</a></li>
                                <li>Event</li>
                            </ul>
                            <a href="javascript:ShowTaskPage('@activity.Key', false);">
                                <h2>@activity.Name</h2>
                            </a>
                            <p>@activity.Description</p>
                            <h5 style="font-size: 10px;"><i class="fa fa-calendar"></i> &nbsp; @activity.Start.ToString("dd.MMMM.yyyy HH:mm") in @activity.Location</h5>
                        </div>
                    }

                }
            </div>
        }
    </section>
    <!-- ./content -->

</div>
<div class="modal fade left" id="performance-review" role="dialog" aria-labelledby="performance-review">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h5 class="modal-title">Submit a performance review</h5>
            </div>
            <div class="modal-body">

                <div class="well custom">

                    <div class="form-group" style="margin: 0;">
                        <label for="stars">Rate the assignee's performance...</label>
                        <select name="stars" class="form-control select2" style="width: 100%;">
                            <option value=""></option>
                            <option value="1">1 star</option>
                            <option value="2">2 stars</option>
                            <option value="3">3 stars</option>
                            <option value="4">4 stars</option>
                            <option value="5">5 stars</option>
                        </select>
                    </div>

                </div>

                <a href="javascript:PerformanceReview()" class="btn btn-success">Confirm</a>
                <a href="#" class="btn btn-danger" data-dismiss="modal">Cancel</a>


            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
@if (Model.StartedBy.Id == currentUser.Id || currentUser.DomainAdministrators.Any(x => x.Id == @currentDomainId))
{
    @Html.Partial("_ModalTask", Model)
    //Html.RenderAction("GenerateModalTask", "Qbicles", new { taskId = Model.Id });
}

@if (Model.StartedBy.Id == currentUser.Id || currentUser.DomainAdministrators.Any(x => x.Id == @currentDomainId) || b2cMember)
{
    Html.RenderAction("GenerateModalMedia", "Qbicles");
}
<!-- /.content-wrapper -->
@{
    if (System.Diagnostics.Debugger.IsAttached)
    {
        <script src="~/Scripts/dev/qbicle.task.js"></script>
    }
    else
    {
        <script src="~/Scripts/dev/qbicle.task.js"></script>
    }
}
