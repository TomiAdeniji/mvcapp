@using Qbicles.BusinessRules
@using Qbicles.Models
@using Qbicles.Models.Trader.Budgets

@model BudgetScenarioItemGroup
@{
    ViewBag.Title = "Budget Scenario: " + Model.BudgetScenario.Title;
    var api = (string)ViewBag.DocRetrievalUrl;
    var pageSize = HelperClass.activitiesPageSize;
    var timeZone = (string)ViewBag.CurrentTimeZone ?? "";
    var userId = ViewBag.CurrentUserId;
    var userAvatar = ViewBag.CurrentUserAvatar;
    var userRight = "none";
    var traderAppRight = (IsReviewerAndApproverModel)ViewBag.TraderApprovalRight;

    var oView = ViewBag.oView;

    var hidden1 = "";
    var hidden2 = "";
    if (oView == "M")
    {
        hidden2 = "hidden";
    }
    else
    {
        hidden1 = "hidden";
    }
    //o1
    if (!traderAppRight.IsInitiators && !traderAppRight.IsReviewer && !traderAppRight.IsApprover)
    { userRight = "none"; }//hiden approval, no edit
                           //o2
    else if (traderAppRight.IsInitiators && !traderAppRight.IsReviewer && !traderAppRight.IsApprover)
    { userRight = "initiator"; } // readonly approval, no edit
                                 //o3
    else if (traderAppRight.IsReviewer && Model.ApprovalRequest.RequestStatus == ApprovalReq.RequestStatusEnum.Pending)
    {
        userRight = "reviewer";
    }//If the user is an ApprovalReq.ApprovalRequestDefinition.Reviewer and the Status of the ApprovalReq is Pending, the drop down displays the items Discard, or Send to Approval.
     //o4
    else if (traderAppRight.IsApprover && Model.ApprovalRequest.RequestStatus == ApprovalReq.RequestStatusEnum.Reviewed)
    {
        userRight = "approver";
    }
    //o4.1
    else if (traderAppRight.IsApprover && Model.ApprovalRequest.RequestStatus == ApprovalReq.RequestStatusEnum.Pending)
    {
        userRight = "initiator";
    }
    //o5
    else if (Model.ApprovalRequest.RequestStatus == ApprovalReq.RequestStatusEnum.Approved
             || Model.ApprovalRequest.RequestStatus == ApprovalReq.RequestStatusEnum.Denied
             || Model.ApprovalRequest.RequestStatus == ApprovalReq.RequestStatusEnum.Discarded)
    {
        userRight = "completed";
    }

    var confirm = "";
    var isChange = "";
    if (userRight == "initiator" || userRight == "completed")
    {
        isChange = "disabled";
        confirm = "hidden";
    }
    if (isChange == "disabled")
    {
        confirm = "hidden";
    }

    var today = (DateTime)ViewBag.Today;
    var timeline = (List<ApprovalStatusTimeline>)ViewBag.Timeline;
    var timelineDate = (List<DateTime>)ViewBag.TimelineDate;
    var dateFormat = (string)ViewBag.CurrentDateFormat;
    var domainId = (int)ViewBag.CurrentDomainId;
    var currencySettings = (Qbicles.Models.CurrencySetting)ViewBag.CurrencySettings;
}

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper qbicle-detail" id="discussion-thread">
    <input id="budget-group-item-id" type="hidden" value="@Model.Id" />
    <input id="group-type" type="hidden" value="@Model.Type" />
    <!-- Main content -->
    <section class="content">

        <div class="row">
            <div class="col-xs-12 item_detail" style="padding-left: 15px;">

                <br />
                <div class="item_type_icon">
                    <img src="~/Content/DesignStyle/img/icon_bookkeeping.png" class="img-circle img-responsive">
                </div>
                <div class="item_titling">
                    <span class="item_type">Trader Budget > Budget Scenario Items Group <span class="approval-action @hidden2">Approval Request</span></span>
                    <h3>Budget Scenario: @Model.BudgetScenario.Title</h3>
                    @{
                        var css = "";
                        var status = Model.Status.ToString();
                        switch (Model.Status)
                        {
                            case BudgetScenarioItemGroupStatus.Pending:
                                status = StatusLabelName.Pending;
                                css = StatusLabelStyle.Pending;
                                break;
                            case BudgetScenarioItemGroupStatus.Reviewed:
                                status = StatusLabelName.Reviewed;
                                css = StatusLabelStyle.Reviewed;
                                break;
                            case BudgetScenarioItemGroupStatus.Approved:
                                status = StatusLabelName.Approved;
                                css = StatusLabelStyle.Approved;
                                break;
                            case BudgetScenarioItemGroupStatus.Draft:
                                status = "Draft";
                                css = StatusLabelStyle.Draft;
                                break;
                            case BudgetScenarioItemGroupStatus.Denied:
                                status = StatusLabelName.Denied;
                                css = StatusLabelStyle.Denied;
                                break;
                            case BudgetScenarioItemGroupStatus.Discarded:
                                status = StatusLabelName.Discarded;
                                css = StatusLabelStyle.Discarded;
                                break;
                        }
                    }
                    <span id="status-css" class="label @css">
                        <span id="status-name">@status</span>
                    </span>
                </div>
                <div class="clearfix"></div>

                <br />

                <div class="row">
                    <div class="col-xs-12">
                        <div class="app_filter">
                            <div class="row">
                                <div class="col-xs-12">
                                    <a onclick="QbicleSelected('@(Model.WorkGroup?.Qbicle.Key??"0")','Dashboard')" class="approval-action btn btn-primary @hidden2"><i class="fa fa-angle-left"></i> &nbsp; View Qbicle</a>
                                    <a onclick="HideApprovalAndMediaCommen()" class="approval-action btn btn-info @hidden2"><i class="fa fa-eye"></i> &nbsp; View in Trader</a>
                                    @{
                                        if (Model.Status == BudgetScenarioItemGroupStatus.Pending && (userRight == "reviewer" || userRight == "approver"))
                                        {
                                            <a id="edit-budget" onclick="BudgetAddEditItem(@Model.Id, @Model.BudgetScenario.Id,'M')" class="btn btn-warning approval-action @hidden2"><i class="fa fa-pencil"></i> &nbsp; Edit</a>
                                        }
                                    }



                                    <a href="/TraderBudget/BudgetMain?id=@Model.BudgetScenario.Id" class="btn btn-primary manager-action @hidden1"><i class="fa fa-angle-left"></i> &nbsp; @Model.BudgetScenario.Title</a>
                                    <a onclick="ShowApprovalAndMediaCommen()" class="btn btn-info manager-action @hidden1"><i class="fa fa-eye"></i> &nbsp; View in Qbicle</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="col-xs-12">

                <br /><br />

                <div class="row">
                    <div class="col-xs-12 col-md-8">

                        <div class="app_upper_dash text-center">
                            <div class="row">
                                <div class="col-xs-12 col-sm-6">
                                    <div class="stat_label">
                                        <span>Workgroup</span>
                                        <h3>@Model.WorkGroup.Name</h3>
                                    </div>
                                </div>

                                <div class="col-xs-12 col-sm-6">
                                    <div class="stat_label">
                                        <span>Type</span>
                                        <h3>@Model.Type.GetDescription()</h3>
                                    </div>
                                </div>
                                <div class="col-xs-12 col-sm-6">
                                    <div class="stat_label" style="padding-bottom: 10px;">
                                        <span>Budgeted / To date</span>
                                        <h3>1,000,000/123,000</h3>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <br />
                        <table id="budget-item-table-approval" class="datatable table-striped table-hover" style="width: 100%;" data-order='[[1, "asc"]]'>
                            <thead>
                                <tr>
                                    <th data-orderable="false" data-priority="2" style="width: 40px;"></th>
                                    <th data-priority="1">Name</th>
                                    <th data-priority="1">Unit</th>
                                    <th class="purchase-col-qty" data-priority="1">Purchase qty</th>
                                    <th class="purchase-col-cost" data-priority="1">Average purchase cost <strong>(@currencySettings.CurrencySymbol)</strong></th>
                                    <th class="sale-col-qty" data-priority="1">Sale qty</th>
                                    <th class="sale-col-price" data-priority="1">Average sale price <strong>(@currencySettings.CurrencySymbol)</strong></th>
                                    <th class="row_total" data-priority="1">Total <strong>(@currencySettings.CurrencySymbol)</strong></th>
                                    <th hidden=""></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.BudgetScenarioItems)
                                {
                                    var type = (int)item.BudgetScenarioItemGroup.Type;
                                    <tr id="tr_id_@item.Item.Id">
                                        <td class="row_image">
                                            <div class="table-avatar mini" style="background-image: url('@api@item.Item.ImageUri');"></div>
                                        </td>
                                        <td class="row_name">@item.Item.SKU - @item.Item.Name</td>
                                        <td class="row_unit">@(item.StartingQuantity?.Unit?.Name ?? "")</td>
                                        <td class="purchase-col-qty">@item.PurchaseQuantity.ToDecimalPlace(currencySettings).Replace(",", ".")</td>
                                        <td class="purchase-col-cost">@item.AveragePurchaseCost.ToDecimalPlace(currencySettings)</td>
                                        <td class="sale-col-qty">@item.SaleQuantity.ToDecimalPlace(currencySettings)</td>
                                        <td class="sale-col-price">@item.AverageSalePrice.ToDecimalPlace(currencySettings)</td>
                                        <td class="row_total">
                                            @{
                                                var total = (item.PurchaseQuantity * item.AveragePurchaseCost + item.SaleQuantity * item.AverageSalePrice).ToDecimalPlace(currencySettings);
                                            }
                                            @total
                                        </td>

                                        <td hidden="" class="row_button">
                                            <input type="hidden" class="traderItem" value="@item.Item.Id" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>


                    </div>
                    <div id="manager-approval" class="col-xs-12 col-md-4">

                        <br class="visible-xs">
                        <br class="visible-xs">

                        @{
                            <div class="alert activity-overview generic reviewer approval-action @hidden2" style="margin-bottom: 5px;">
                                <img style="background-image: url('@api@userAvatar')" class="activity-avatar">
                                <strong style="display: block; padding-bottom: 5px;">You</strong>
                                @if (Model.ApprovalRequest != null)
                                {
                                    <input type="hidden" id="action_approval_default" value="@Model.ApprovalRequest.RequestStatus" />
                                }
                                else
                                {
                                    <input type="hidden" id="action_approval_default" value="" />
                                }
                                <input type="hidden" id="action_approval_default" value="@Model.ApprovalRequest.RequestStatus" />
                                <select @isChange id="action_approval" class="form-control select2" style="width: 100%;" data-placeholder="Please choose...">
                                    @{
                                        switch (userRight)
                                        {
                                            case "initiator":
                                                <option>@Model.ApprovalRequest.RequestStatus</option>
                                                break;
                                            case "reviewer":
                                                <option value="Reviewed" selected>Send to Approval</option>
                                                <option value="Discarded">Discard</option>
                                                break;
                                            case "approver":
                                                <option value="Approved" selected>Approve</option>
                                                <option value="Pending">Send back to Review</option>
                                                <option value="Denied">Deny</option>
                                                break;
                                            case "completed":
                                                <option>@Model.ApprovalRequest.RequestStatus</option>
                                                break;
                                        }
                                    }
                                </select>

                                @{
                                    if (confirm == "")
                                    {
                                        var approvalId = Model.ApprovalRequest?.Id.Encrypt();
                                        <button id="approval-button" onclick="javascript:UpdateStatusApproval('@approvalId');" style="margin: 8px 0 3px 0;" class="btn btn-success">
                                            <div class="loading-approval hidden">
                                                <i class="fa fa-spinner fa-spin"></i> &nbsp; Approving...
                                            </div>
                                            <div class="general-approval">
                                                Confirm
                                            </div>
                                        </button>
                                    }
                                }

                            </div>
                        }

                        <br />

                        <ul class="timeline">
                            @foreach (var date in timelineDate)
                            {
                                var dateStart = HelperClass.DatetimeToOrdinal(date.ConvertTimeFromUtc(timeZone));
                                var dateStr = date.Date == today.Date ? "Today" : dateStart;

                                <li class="time-label">
                                    <span class="label label-lg label-primary">
                                        @dateStr
                                    </span>
                                </li>
                                foreach (var tl in timeline.Where(d => d.LogDate.Date == date.Date))
                                {
                                    <li>
                                        <i class="@tl.Icon"></i>
                                        <div class="timeline-item">
                                            <span class="time"><i class="fa fa-clock-o"></i> @tl.Time</span>
                                            <h4 class="timeline-header">@tl.Status</h4>
                                        </div>
                                    </li>
                                }
                            }

                        </ul>

                    </div>
                </div>



                <br /><br />
                @* comment and media*@
                <div class="app_topnav entity_adds approval-action @hidden2" style="background: #fff; padding: 0;">
                    <ul class="nav nav-pills app_main_nav">
                        <li role="presentation" class="active">
                            <a href="#tab1" data-toggle="tab">
                                <i class="fa fa-comments"></i>
                                Comments
                            </a>
                        </li>
                        <li role="presentation">
                            <a href="#tab2" data-toggle="tab">
                                <i class="fa fa-folder-open"></i>
                                Files
                            </a>
                        </li>
                    </ul>
                </div>
                <br />
                <div class="row approval-action @hidden2">
                    <div class="col-xs-12">
                        <div class="tab-content">
                            <div class="tab-pane fade in active" id="tab1">
                                <div class="row">
                                    <div class="col-xs-12">
                                        <div class="well" style="max-width: 800px;">
                                            <div class="form-group">
                                                <label for="add-comment">Add a comment</label>
                                                <textarea id="txt-comment-approval" name="add-comment" class="form-control"></textarea>
                                            </div>
                                            <button onclick="AddCommentForApproval('@Model.ApprovalRequest.Key')" class="btn btn-success">Submit</button>
                                        </div>
                                        <br />
                                    </div>
                                </div>
                                <div id="list-comments-approval">
                                    @foreach (var post in Model.ApprovalRequest.Posts.OrderByDescending(x => x.StartedDate).Take(pageSize))
                                    {

                                        <!-- General post -->
                                        var fullName = HelperClass.GetFullNameOfUser(post.CreatedBy, userId);
                                        <article id="post-@post.Id" class="activity post">
                                            <img style="background-image: url('@api@post.CreatedBy.ProfilePic')" class="activity-avatar" />
                                            <div class="activity-detail">
                                                <div class="activity-meta">
                                                    <h4>@fullName</h4>
                                                    <small>@post.StartedDate.ConvertTimeFromUtc(timeZone).ToString(dateFormat+ ", hh:mmtt")</small>
                                                </div>
                                                <div class="activity-overview media-comment">
                                                    <p>
                                                        @Html.Raw(post.Message.Replace(Environment.NewLine, "<br />"))
                                                    </p>
                                                </div>
                                            </div>
                                            <div class="clearfix"></div>
                                        </article>
                                        <!-- END General post -->
                                    }
                                </div>
                                @if (Model.ApprovalRequest.Posts.Count() > pageSize)
                                {
                                    <button id="btnLoadPosts" onclick="LoadMorePosts('@Model.ApprovalRequest.Key', @pageSize,'list-comments-approval')" class="btn btn-info trigger_load">Load older posts</button>
                                }
                            </div>

                            <div class="tab-pane fade" id="tab2">
                                <br />
                                <a href="javascript:void(0)" class="btn btn-success" id="btnAddFile" data-toggle="modal" data-target="#create-media"><i class="fa fa-upload"></i> &nbsp; Upload a file</a>

                                <br /><br />
                                <div id="list-medias">
                                    @if (Model.ApprovalRequest.SubActivities.Count > 0)
                                    {
                                        foreach (var item in Model.ApprovalRequest.SubActivities.OrderByDescending(x => x.Id).Take(pageSize))
                                        {
                                            var media = (QbicleMedia)item;
                                            var createdByName = HelperClass.GetFullNameOfUser(media.StartedBy, userId);
                                            var createdDate = media.StartedDate.Date == DateTime.UtcNow.Date ? "Today, " + media.StartedDate.ConvertTimeFromUtc(timeZone).ToString("hh:mmtt").ToLower() : media.StartedDate.ConvertTimeFromUtc(timeZone).ToString(dateFormat + " hh:mmtt").ToLower();
                                            var mediaLastupdate = media.VersionedFiles.Where(e => !e.IsDeleted).OrderByDescending(x => x.UploadedDate).First() ?? null;
                                            var lastUpdateFile = mediaLastupdate != null ? (mediaLastupdate.UploadedDate.Date == DateTime.UtcNow.Date ? "Today, " + mediaLastupdate.UploadedDate.ConvertTimeFromUtc(timeZone).ToString("hh:mmtt").ToLower() : mediaLastupdate.UploadedDate.ConvertTimeFromUtc(timeZone).ToString(dateFormat + " hh:mmtt").ToLower()) : createdDate;
                                            //Media post
                                            <article class="activity media">
                                                <img style="background-image: url('@api@media.StartedBy.ProfilePic')" class="activity-avatar" />
                                                <div class="activity-detail">
                                                    <div class="activity-meta">
                                                        <h4>@createdByName</h4>
                                                        <small>@createdDate</small>
                                                        <br class="visible-xs">
                                                    </div>
                                                    <div class="activity-overview media">
                                                        <div class="row">
                                                            <div class="col-xs-12 col-sm-5 col-md-6 col-lg-5">
                                                                <a href="javascript:void(0)" onclick="ShowMediaPage('@media.Key')">
                                                                    @if (media.FileType.Type == "Image File")
                                                                    {
                                                                        <img id="media-@item.Id" class="img-responsive" src='@api@mediaLastupdate.Uri' />
                                                                    }
                                                                    else
                                                                    {
                                                                        <img src="@media.FileType.IconPath" class="img-responsive">
                                                                    }
                                                                </a>
                                                            </div>
                                                            <div class="col-xs-12 col-sm-7 col-md-6 col-lg-7 description">
                                                                <h5>@media.Name</h5>
                                                                <p>
                                                                    @media.Description
                                                                </p>
                                                                <small>@media.FileType.Type | Update @lastUpdateFile</small>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="clearfix"></div>
                                            </article>
                                            <!-- END Media post -->
                                        }
                                    }
                                </div>
                                @if (Model.ApprovalRequest.SubActivities.Count() > pageSize)
                                {
                                    <button id="btnLoadMedias" onclick="LoadMoreMedias(@Model.ApprovalRequest.Id,@pageSize,'list-medias')" class="btn btn-info trigger_load">Load older medias</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

    </section>
    <!-- ./content -->

</div>
<!-- /.content-wrapper -->


<div class="modal fade left" id="app-trader-budget-item-add-edit" role="dialog" aria-labelledby="app-trader-budget-item-add"></div><!-- /.modal -->
<div class="modal fade left" id="app-trader-budget-item-breakdown-buysell" role="dialog" aria-labelledby="app-trader-budget-item-breakdown-buysell"></div><!-- /.modal -->

<div class="modal fade" style="z-index: 9999" id="confirm-delete" role="dialog" aria-labelledby="confirm-delete">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">

                <div class="activity-overview generic help-text" style="margin: 0;">
                    <i class="fa fa-info-circle"></i>
                    <p>You are about to delete item permanently. This action cannot be undone. If you are sure you wish to proceed, please confirm below...</p>


                    <button class="btn btn-danger" onclick="CancelDelete()">Cancel</button>
                    <button class="btn btn-success" onclick="RemoveRowItem()">Confirm &amp; Delete</button>
                </div>


            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>



@{
    Html.RenderAction("GenerateModalMedia", "Qbicles");
}

@{
    if (System.Diagnostics.Debugger.IsAttached)
    {
        <script src="~/Scripts/dev/trader.budget.process.approval.js"></script>
        <script src="~/Scripts/dev/trader.domain.js"></script>
    }
    else
    {
        <script src="~/Scripts/dev/trader.budget.process.approval.min.js"></script>
        <script src="~/Scripts/dev/trader.domain.min.js"></script>
    }
}