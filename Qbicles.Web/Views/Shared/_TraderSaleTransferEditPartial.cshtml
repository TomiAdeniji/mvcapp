@using Qbicles.BusinessRules
@using Qbicles.Models.Trader;
@using Qbicles.Models.Trader.Movement;
@model TraderTransfer
@{
    var currencySettings = (Qbicles.Models.CurrencySetting)ViewBag.CurrencySettings;
    var traderSale = (TraderSale)ViewBag.TraderSale;
    var api = (string)ViewBag.DocRetrievalUrl;
    var workGroupTransfer = (List<WorkGroup>)ViewBag.WorkgroupTransfer;
    var onPage = ViewBag.OnPage;
}
<input type="hidden" value="@Model.Id" id="transfer_model_id" />
@*<input type="hidden" value="@traderSale.Id" id="sale_model_id" />*@
<input type="hidden" value="@traderSale.Key" id="sale_model_key" />
<div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h5 class="modal-title">Initiate a transfer for Sale #@(traderSale.Reference?.FullRef?? traderSale.Id.ToString())</h5>
        </div>
        <div class="modal-body">


            <div class="row">
                <div class="col-xs-12 col-md-4">

                    <div class="activity-overview generic" style="padding: 20px;">
                        <div class="form-group" style="margin: 0;">
                            <label for="workgroup">Assign a Workgroup to this Transfer <span>*</span></label>
                            <select id="transfer-workgroup-select" name="workgroup" class="form-control select2" style="width: 100%;" onchange="WorkGroupSelectedChange()">
                                @foreach (var wg in workGroupTransfer)
                                {
                                    <option value="@wg.Id">@wg.Name</option>
                                }
                            </select>
                        </div>

                        <div class="preview-workgroup" style="display: none;">
                            <br />
                            <table class="table app_specific" style="margin: 0;">
                                <tr>
                                    <td><h5>Location</h5></td>
                                    <td class="location_name">Location name</td>
                                </tr>
                                <tr>
                                    <td><h5>Process</h5></td>
                                    <td class="workgroup_process">Transfers</td>
                                </tr>
                                <tr>
                                    <td><h5>Qbicle</h5></td>
                                    <td class="workgroup_qbicle">Qblicle Name</td>
                                </tr>
                                <tr>
                                    <td><h5>Members</h5></td>
                                    <td class="workgroup_member"><button class="btn btn-info" onclick="ShowGroupMember()" data-toggle="modal" data-target="#app-trader-workgroup-preview"><i class="fa fa-user"></i> &nbsp; <span></span></button></td>
                                </tr>
                            </table>
                        </div>
                    </div>

                    <br />

                    <div class="activity-overview task" style="padding: 20px; margin-bottom: 30px;">
                        @{
                            if (traderSale.DeliveryMethod == DeliveryMethodEnum.Delivery)
                            {
                                <h5>Delivery address</h5>
                                <p>
                                    @(traderSale.Purchaser?.Name),<br />
                                    @Html.Raw(traderSale.DeliveryAddress?.ToAddress().Replace(",", "<br />"))
                                </p>
                            }
                            else
                            {
                                <h5>@traderSale.DeliveryMethod.GetDescription()</h5>
                                <p>@(traderSale.Purchaser?.Name)</p>
                            }
                        }

                    </div>

                </div> <!-- ./div -->
                <div class="col-xs-12 col-md-8">
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="form-group">
                                <label for="reference">Reference</label>
                                <input type="hidden" value="@Model.Reference.Id" id="sale-reference_id" />
                                <input type="hidden" value="@Model.Reference.Type.ToString()" id="sale-reference_type" />
                                <input type="hidden" value="@Model.Reference.Prefix" id="sale-reference_prefix" />
                                <input type="hidden" value="@Model.Reference.Suffix" id="sale-reference_suffix" />
                                <input type="hidden" value="@Model.Reference.Delimeter" id="sale-reference_delimeter" />
                                <input type="hidden" value="@Model.Reference.FullRef" id="sale-reference_fullref" />
                                <div class="show-ref">
                                    <p>
                                        @Model.Reference.Prefix@Model.Reference.Delimeter<span id="sale-refedit">@Model.Reference.NumericPart</span>@Model.Reference.Delimeter@Model.Reference.Suffix &nbsp; &nbsp;
                                    </p>
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="activity-overview generic help-text animated bounce">
                                <i class="fa fa-info-circle"></i>
                                <p>
                                    Choose which items you'll be delivering below, and in what quantity. Orders can be split over multiple Transfers until the
                                    <em>remaining</em> count has been fulfilled.
                                </p>
                            </div>


                            <div class="activity-overview task" style="padding: 20px;">

                                <table class="datatable table-hover" id="transfer_sale_table" style="width: 100%; background: #fff;" data-order='[[1, "asc"]]'>
                                    <thead>
                                        <tr>
                                            <th data-orderable="false"></th>
                                            <th>Name</th>
                                            <th>Unit</th>
                                            <th>Qty</th>
                                            <th>Transfer unit</th>
                                            <th>Transfer qty</th>
                                            <th>Remaining</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.TransferItems)
                                        {

                                            decimal totalQuantity = 0;
                                            decimal totalTransfer_old = 0;
                                            decimal quantity_old = 0;
                                            //decimal remainderQuantity = 0;

                                            var quantityTransaction = item.TransactionItem.Unit?.QuantityOfBaseunit ?? 1;
                                            <tr class="transfer_tr_@item.Id">
                                                <td>
                                                    <div class="table-avatar" style="background-image: url('@(api + item.TraderItem.ImageUri)&size=T');">
                                                        <input type="hidden" value="@item.TransactionItem.Id" class="saleitem_td_id" />
                                                        <input type="hidden" value="@item.TraderItem.Id" class="saleitem_td_traderitem_id" />
                                                        <input type="hidden" value="@item.Id" class="transfer_td_id" />
                                                    </div>
                                                </td>
                                                <td class="transfer_td_sale_name">
                                                    @item.TraderItem.Name
                                                    <input class="transfer_conversionunit_quan" type="hidden" value="0" />

                                                    @{

                                                        var itemQantity = item.QuantityAtDelivery;

                                                        if (traderSale.SaleItems.Count > 0)
                                                        {
                                                            foreach (var traderTransactionItem in traderSale.SaleItems)
                                                            {
                                                                if (traderTransactionItem.Id == item.TransactionItem.Id)
                                                                {
                                                                    totalQuantity = traderTransactionItem.Quantity * traderTransactionItem.Unit?.QuantityOfBaseunit ?? 1;
                                                                    // show UI
                                                                    quantity_old = traderTransactionItem.Quantity;
                                                                    // caculate transfer old
                                                                    if (traderTransactionItem.TransferItems.Count > 0)
                                                                    {
                                                                        foreach (var traderTransferItem in traderTransactionItem.TransferItems)//.Where(e => e.AssociatedTransfer.Status == TransferStatus.Delivered))
                                                                        {
                                                                            totalTransfer_old += traderTransferItem.QuantityAtDelivery * traderTransferItem.Unit?.QuantityOfBaseunit ?? 1;

                                                                        }
                                                                    }
                                                                }

                                                            }
                                                        }

                                                        totalQuantity = totalQuantity - totalTransfer_old;
                                                        <input class="total_sale_@item.Id" type="hidden" value="@(totalQuantity + item.QuantityAtDelivery)" />

                                                        <input class="conversion_trans_@item.Id" type="hidden" value="0" />
                                                        //remainderQuantity = totalQuantity / item.TransactionItem.Unit?.QuantityOfBaseunit ?? 1;
                                                    }

                                                </td>
                                                <td class="transfer_td_sale_unit_name">
                                                    @(item.TransactionItem.Unit.Name ?? "")
                                                </td>
                                                <td class="transfer_td_sale_quan">@quantity_old.ToDecimalPlace(currencySettings)</td>
                                                <td>
                                                    @{Html.RenderAction("ShowTransferItemUnit", "TraderTransfers", new { id = item.Id, locationId = traderSale.Location.Id });}
                                                </td>
                                                <td class="transfer_td_tran_quan">
                                                    <input type='number' name="item-1-qty" class="form-control" style="width: 80px;" maxlength='15'
                                                           onkeypress='decimalKeyPress(this, event)'
                                                           onchange="SetTransferCost(@item.Id)"
                                                           onpaste='decimalOnPaste(this, event)'
                                                           value="@Math.Round(item.QuantityAtDelivery, 2)">

                                                </td>
                                                <td class="transfer_td_tran_cost_@item.Id"><span class="remainder">@Math.Round(totalQuantity, 2)</span></td>
                                            </tr>
                                        }


                                    </tbody>
                                </table>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <br />
            <button class="btn btn-danger" data-dismiss="modal">Cancel</button>
            @{
                if (Model.Id > 0 && onPage == "review")
                {
                    <a href="javascript:void(0)" onclick="SendToPickup('@Model.Status')" class="btn btn-success"><i class="fa fa-thumbs-up"></i> &nbsp; Save</a>
                }
                else if (onPage != "review")
                {
                    <button class="btn btn-primary" onclick="SendToPickup('Draft')">Save draft</button>
                    <button class="btn btn-success" onclick="SendToPickup('PendingPickup')">Send for pickup</button>
                }
            }


        </div>
    </div><!-- /.modal-content -->
</div><!-- /.modal-dialog -->

<script>
    $('#transfer-workgroup-select').not('.multi-select').select2();
    WorkGroupSelectedChange();
</script>